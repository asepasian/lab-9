---
title: "Lab 9: Data Simulation Exploration"
author: "Amir Sepasian"
editor: source
embed-resources: true
format: 
  html:  
    embed-resources: true
    code-tools: true
    toc: true
execute: 
  echo: true
  warning: false
  message: false
code-fold: true
---

```{r}
#| label: setup

library(gt)
library(kableExtra)
library(knitr)
library(tidyverse)

```

## Random Babies Simulation

Perhaps you have seen the [Random Babies applet](https://www.rossmanchance.com/applets/2021/randombabies/RandomBabies.html)? 
Suppose one night at a hospital four babies are born. The hospital is not very
organized and looses track of which baby belongs to each parent(s), so they 
decide to return the babies to parents at random. Here, we are interested in the
number of babies that are correctly returned to their respective parent(s).

**1. Simulate the distribution of the number of babies that are correctly returned. Use 10,000 simulations.**

::: callout-tip
Write a function to accomplish one simulation, then use `map_int()` to run
10,000 simulations. 

Keep in mind that your function needs to output a single number (not data frame) 
for it to be compatible with `map_int()`!
:::

```{r}
#| label: function-simulation-for-random-babies

randomBabies <- function(nBabies = 4){
  
  shuff_babies <- sample(1:nBabies)
  return(sum(1:nBabies == shuff_babies))
    
}


results <- map_int(.x = 1:10000,
                   .f = ~ randomBabies())

```

**2. Create a table displaying the proportion of simulations where 0, 1, 2, 3, and 4 babies were given to their correct parent(s).** Hint: A `pivot_wider()` will be helpful here!

::: callout-tip
The output of your `map_int()` is a vector, but to make a nice table (and plot) 
you need this to be a data frame! Luckily, the `enframe()` function does just 
that--it converts a vector to a data frame. 

You may find the following code helpful:

ChatGBT Link: 

```{r}
#| label: table-for-random-babies

babyData <- enframe(results, 
        name = 'simulation_number', 
        value = 'ncorrect')


babyData |>
  count(ncorrect) |>
  mutate(proportions = n / sum(n)) |> 
  select(ncorrect, proportions) |>
  pivot_wider(names_from = ncorrect,
              values_from = proportions) |>
  gt() |>
  
  tab_header(title = 'Proportion of Simulations for Correctly Returned Babies') |>
  cols_label(`0` = '0 Babies',
             `1` = '1 Baby',
             `2` = '2 Babies',
             `4` = '4 Babies') |>
 
   tab_options(table.font.size = 12,
               table.font.names = 'Georgia')

```

**3. Now create a barplot showing the proportion of simulations where 0, 1, 2, 3, and 4 babies were given to their correct parent(s).** 

::: callout-tip
You may find the following code helpful:

```{r}
#| eval: false

geom_bar(mapping = aes(y = after_stat(count) / sum(after_stat(count))
                       )
         )
```
:::

```{r}
#| label: visualization-for-random-babies

enframe(results, name = 'simulation_number', value = 'ncorrect') |>
  ggplot(aes(x = as.factor(ncorrect)
             )
         ) +
  geom_bar(mapping = aes(y = after_stat(count) / sum(after_stat(count))
                       )
         ) +
  labs(x = 'Count of Correct Baby Matches',
       y = '',
       title = 'Dipected Simluations of Correctly Matched Babies',
       subtitle = 'Proportions')
  

```
